# Robot Model, [model_type]: 
#       1. Unicycle Model with State Vector: [x, y, phi], Control Vector: [v, w]

# Pedestrian Model for the controller, [ped_predictor]: 
#       1. Constant Velocity Propagation with State Vector: [x, y, vx, vy]
#       2. Neural Predictor (work in progress)

# Pedestrian pyminisim model:
#       1. Headed Social Force Model (HSFM)
#       2. Optimal Reciprocal Collision Avoidance (ORCA)

init_state: [-4,  0,  0]                   # Initial robot state vector: [x, y, phi] [m, m, rad] for "unicycle" model_type and  [x, y, phi, v, w] [m, m, rad, m/s, rad/s] for "unicycle_double_integrator" model_type
goal: [4, 0, 0]                            # Reference robot position: [x,  y,  phi], [m, m, rad]
dt: 0.1                                    # Time interval, [s]
horizon: 10                                # DWA planning horizon, [steps]
ped_predictor: "constant_velocity"         # Pedestrian predictor, ["constant_velocity", "neural"]
ped_model: "ORCA"                          # Pedestrian pyminisim model, ["HSFM", "ORCA"]
cost_function: "euclidean"                 # Cost function for the DWA controller, ["original", "euclidean"]
v_res: 0.1                                 # Discretization resolution for linear velocity v, [m/s]
w_res: 0.1                                 # Discretization resolution for angular velocity w, [ras/s]
r_rob: 0.35                                # Robot radius, [m]
r_ped: 0.3                                 # Pedestrian radius, [m]
lb: [0, -2]                                # Lower bounds for NLP: [v, w], [m/s, rad/s]
ub: [2, 2]                                 # Upper bounds for NLP: [v, w], [m/s, rad/s]
weights: [1., 1., 2]                       # Weights for cost functions. "Original" cost function uses 3 weights, whereas "Euclidean" cost function uses only first two coefficients.
total_peds: 7                              # Amount of pedestrians
ped_detc_range: 4                          # Pedestrian detector max range, [m]
ped_detc_fov: 180                          # Pedestrian detector max fov, [deg] 
misdetection_prob: 0                       # Probability of pedestrian misdetection
state_dummy_ped: [10000, 10000, 0, 0]      # Dummy pedestrian state vector: [x_ped,  y_ped, vx_ped, vy_ped], [m, m, m/s, m/s]
is_robot_visible: False                    # Boolean flag of robot visibility for pedestrians
tollerance_error: 0.1                      # Tollernce error for the Euclidean distance to the goal, [m]
max_ghost_tracking_time: 10                # Amount of steps to track ghost pedestrian, [step]
waypoint_tracker: "fixed"                  # Choose a waypoint tracker for pedestrians: ["random", "fixed"]
pedestrians_init_states: [                 # Only for "fixed" waypoint_tracker
  [ 4,  0,  0],                            # Provide initial states of the pedestrians according to the amount specified in total_peds, [x, y, phi], [m, m, rad]
  [ 0, -4,  0],
  [ 0,  4,  0],
  [ 2.82,  2.82, 0],
  [-2.82, -2.82, 0],
  [ 2.82, -2.82, 0],
  [-2.82,  2.82, 0]
]
pedestrians_goals: [                       # Only for "fixed" waypoint_tracker
  [[-4,  0]],                              # Provide goals for the pedestrians according to the amount specified in total_peds, [x, y], [m, m]
  [[ 0,  4]],
  [[ 0, -4]],
  [[-2.82, -2.82]],
  [[ 2.82,  2.82]],
  [[-2.82,  2.82]],
  [[ 2.82, -2.82]],
]
