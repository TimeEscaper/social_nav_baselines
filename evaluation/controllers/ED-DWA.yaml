# Scenario: DWA with Euclidean cost-function

# Robot Model, [model_type]: 
#       1. ["unicycle"] : Unicycle Model with State Vector: [x, y, phi], Control Vector: [v, w]

# Pedestrian Model for the controller, [ped_predictor]: 
#       1. ["constant_velocity"] : Constant Velocity Propagation with State Vector: [x, y, vx, vy]
#       2. ["neural"] : Neural Predictor (work in progress)

horizon: 10                                # DWA planning horizon, [steps]
ped_predictor: "constant_velocity"         # Pedestrian predictor, ["constant_velocity", "neural"]
cost_function: "euclidean"                 # Cost function for the DWA controller, ["original", "euclidean"]
v_res: 0.1                                 # Discretization resolution for linear velocity v, [m/s]
w_res: 0.1                                 # Discretization resolution for angular velocity w, [ras/s]
r_rob: 0.35                                # Robot radius, [m]
r_ped: 0.3                                 # Pedestrian radius, [m]
lb: [0, -2]                                # Lower bounds for NLP: [v, w], [m/s, rad/s]
ub: [2, 2]                                 # Upper bounds for NLP: [v, w], [m/s, rad/s]
weights: [1., 1., 2]                       # Weights for cost functions. "Original" cost function uses 3 weights, whereas "Euclidean" cost function uses only first two coefficients
state_dummy_ped: [10000, 10000, 0, 0]      # Dummy pedestrian state vector: [x_ped,  y_ped, vx_ped, vy_ped], [m, m, m/s, m/s]
max_ghost_tracking_time: 10                # Amount of steps to track ghost pedestrian, [step]